<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Adventure;
use AppBundle\Field\Field;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\PropertyAccess\PropertyAccessor;

/**
 * AdventureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdventureRepository extends EntityRepository
{
    /**
     * @return Adventure[]
     */
    public function getWithSuspiciousLinks()
    {
        $qb = $this->createQueryBuilder('a');

        return $qb
            ->where($qb->expr()->orX(
                $qb->expr()->gte($qb->expr()->length('a.link'), 100),
                $qb->expr()->like('a.link', $qb->expr()->literal('%mega%')),
                $qb->expr()->like('a.link', $qb->expr()->literal('%dropbox%'))
            ))
            ->orderBy($qb->expr()->desc('a.createdAt'))
            ->getQuery()->execute();
    }

    /**
     * Get all distinct values and their usage counts for a certain field. Will ignore NULL values
     *
     * @param Field $field
     *
     * @return array Array of arrays containing the 'value' and 'count'
     */
    public function getFieldValueCounts(Field $field): array
    {
        $qb = $this->createQueryBuilder('a');

        $field = 'a.' . $field->getName();
        $results = $qb
            ->select($field)
            ->addSelect($qb->expr()->count($field))
            ->where($qb->expr()->isNotNull($field))
            ->groupBy($field)
            ->orderBy($qb->expr()->asc($field))
            ->getQuery()
            ->getArrayResult();

        return array_map(function ($result) {
            return [
                'value' => current($result),
                'count' => $result[1],
            ];
        }, $results);
    }

    /**
     * Updates $field of all adventures where $field = $oldValue to $newValue
     *
     * @param Field $field
     * @param string $oldValue
     * @param string|null $newValue
     * @return int The number of affected adventures
     */
    public function updateField(Field $field, string $oldValue, string $newValue = null): int
    {
        $propertyAccessor = new PropertyAccessor();
        /** @var Adventure[] $adventures */
        $adventures = $this->findBy([$field->getName() => $oldValue]);
        foreach ($adventures as $adventure) {
            $propertyAccessor->setValue($adventure, $field->getName(), $newValue);
        }
        $this->getEntityManager()->flush();

        return count($adventures);
    }

    public function getWithMostUnresolvedChangeRequestsQuery()
    {
        $qb = $this->createQueryBuilder('a');

        return $qb
            ->join('a.changeRequests', 'c')
            ->where($qb->expr()->eq('c.resolved', $qb->expr()->literal(false)))
            ->select('a.title,a.slug')
            ->addSelect('COUNT(c.id) AS changeRequestCount')
            ->groupBy('a.id')
            ->orderBy($qb->expr()->desc('changeRequestCount'))
            ->getQuery();
    }
}
