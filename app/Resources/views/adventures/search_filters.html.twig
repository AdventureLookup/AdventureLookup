{% macro filter_checkbox(field, value, checked, count, hidden) %}
    {% set name = 'f[' ~ field.name ~ '][v][]' %}
    <div class="option{% if hidden %} d-none{% endif %}">
        <input type="checkbox" id="{{ name }}" name="{{ name }}" value="{{ value }}"
               {% if checked %}checked{% endif %}
        />
        <label for="{{ name }}">
            {{ value }}
            <span class="badge-pill badge badge-default">{{ count }}</span>
        </label>
    </div>
{% endmacro %}

{% macro filter_field(field, stats, searchFilter, hidden) %}
    {% import _self as macros %}
    {% set filter = searchFilter[field.name]|default([]) %}
    {% if hidden %}
        {% set value = filter['v']|default('') %}
        {% if value %}
        <input type="hidden" name="f[{{ field.name }}][v]" value="{{ value }}" >
        {% endif %}
    {% else %}
    <div class="filter" id="filter-{{ field.name }}">
        <div class="title">{{ field.title }}</div>
        <div class="options-list">
            {#{% if field.description is not empty %}#}
                {#<p class="card-text small">{{ field.description }}</p>#}
            {#{% endif %}#}
            {% if field.type == 'string' %}
                {% set buckets = stats['vals_' ~ field.name]['buckets'] %}
                {% set showMoreAfter = 5 %}
                {% set valuesUsed = [] %}
                {% for bucket in buckets %}
                    {% set valuesUsed = valuesUsed|merge([bucket.key]) %}
                    {{ macros.filter_checkbox(field, bucket.key, bucket.key in filter['v']|default([]), bucket.doc_count, loop.index0 >= showMoreAfter) }}
                {% endfor %}
                {% for value in filter['v']|default([]) if value != '' and value not in valuesUsed %}
                    {{ macros.filter_checkbox(field, value, true, 0, false) }}
                {% endfor %}
                {% if buckets|length > showMoreAfter %}
                    <div class="option more">more</div>
                {% endif %}
            {% elseif field.type == 'boolean' %}
                <label class="form-check-label">
                    <input class="form-check-input" type="radio"
                           name="f[{{ field.name }}][v]" value=""
                           {% if filter['v']|default('') == '' %}checked{% endif %}
                    /> All
                </label>
                <label class="form-check-label">
                    <input class="form-check-input" type="radio"
                           name="f[{{ field.name }}][v]" value="1"
                           {% if filter['v']|default('') == '1' %}checked{% endif %}
                    /> Yes
                </label>
                <label class="form-check-label">
                    <input class="form-check-input" type="radio"
                           name="f[{{ field.name }}][v]" value="0"
                           {% if filter['v']|default('') == '0' %}checked{% endif %}
                    /> No
                </label>
            {% elseif field.type == 'integer' %}
                <div class="row no-gutters mb-3">
                    <div class="col">
                        <input type="number" name="f[{{ field.name }}][v][min]" id="filter-{{ field.name }}-min"
                               placeholder="min (inc.)" class="form-control form-control-sm"
                               value="{{ filter['v']|default({min: ''})['min'] }}"
                               title="min (inc.)"
                        />
                    </div>
                    <div class="col">
                        <input type="number" name="f[{{ field.name }}][v][max]" id="filter-{{ field.name }}-max"
                               placeholder="max (inc.)" class="form-control form-control-sm"
                               value="{{ filter['v']|default({max: ''})['max'] }}"
                               title="max (inc.)"
                        />
                    </div>
                </div>
            {% endif %}
        </div>
    </div>
    {% endif %}
{% endmacro %}
{% import _self as macros %}
{% 
set visible_fields = [
              'publisher',
              'setting',
              'edition',
              'environments',
              'items',
              'bossMonsters',
              'commonMonsters',
              'numPages',
              'minStartingLevel',
              'maxStartingLevel',
              'startingLevelRange',
              'soloable',
              'pregeneratedCharacters',
              'handouts',
              'tacticalMaps',
              'partOf',
              'foundIn'
             ]
%}
{% for field in fields %}
{{ macros.filter_field(field, stats, searchFilter, field.name not in visible_fields) }}
{% endfor %}
